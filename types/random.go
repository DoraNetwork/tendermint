package types

import (
	"github.com/tendermint/tendermint/vrf/utils"
	"github.com/tendermint/tendermint/vrf/secp256k1VRF"
)

var (
	GENESIS_SEED, _ = utils.FromHex("a2f4f844d46240a86790c177f21422f430b2803c7590f32625079fc13a5fe601")
	GENESIS_PROOF, _ = utils.FromHex("d587ff4b4f6c259436b9e6ab48a2986e9e42fa5e322370740b8306ad840ba08b7adbee05d0836cd245269dc03586cadf8b3d3d4575fa12c37abf436ce73c67e004e54044c12dd5ab7b90a57117a85d6307125496ada896d9823c860c4f492c0096c714705d58ee7d66ee6cffb5f1320c5eab7f92490b0f5759145588efa0b0537d")
)

// Random generated by VRF
type VrfRandom struct {
        Seed []byte  `json:"seed"`
        Proof []byte `json:"proof"`
}

// Generate random using secp256k1
// TODO: support more signature algorithms
func GenerateRandom(seckey []byte, input ...[]byte) (VrfRandom, error) {
	signer, err := secp256k1VRF.NewVRFSignerFromRawKey(seckey)
	if err != nil {
		return VrfRandom{}, err
	}

	data := utils.Sha3256(input...)

	seed, proof := signer.Evaluate(data)
	if proof == nil {
		return VrfRandom{}, secp256k1VRF.ErrEvaluateFailed
	}
	return VrfRandom{seed[:], proof}, nil
}